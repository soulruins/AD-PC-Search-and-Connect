#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: a213e38d-76c1-4ce9-8971-0444ad35a163
# Source File: ..\..\search.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
wQQAAB+LCAAAAAAABABllFmrq1gQRt8D+Q+H+yq0W41uA+ceMJrJOXGKvqnZzvOsv77Tt18aup6K
+igoisX6fqKwnlC3Cv7gf32aPq2r37+ov4hfP/vd19e31qVxWvnFJS2Q6pfop0d+FyZ/NX30jf8v
/LNyqbvyR5YtSCTHt59wHMdrAs/9WydOsO1hGMmce0Q+bkVERtfW0Tm3B00qYkksyy6pvbTMmHTx
mHPw9qEvAw1I+LTfkdxBuqyozwmpSOtnqpBRBcV5U6AxiR0bA/kG8QQkMFpPjGYpWuPjmWCfnxvm
8ZrF6l37kPoaD2wZ7HeFRY6P0FbSHB4Z3jz2h/IViqBmuOQ+SHIo1mo+F9V88dwMPVCqUOeQjGN/
s9rOrpEJaO9yuoOZnUm03xHMW3F4w1WSQyvIFisFhqHL7tr0CVFrD6W4HDBXORhyRHLhmC782ZQ4
oAVqW1lkjzpwox5TvJ3ClJ33O0AwyrLkdxjoEX9NQ6IkDJ8IqLiDSYM5Y9CFFKW+Lca9KmUYBI7E
3HjrRscP2c0W6vQoptFxWUXX7sJ+Z4dXyzqdjU4SueQVJTT+PmCxTlqDPOfIPUTOHHnztWN0gBmR
StFIju3h6nrr/YU9nYgF4wnykmuUDr3f3bdyW41X6Iu9QiICDFsKwbn3wGW1jBgMRMZztNpMQLA5
+uF32oFW2zS8sobCYIbIO5dkdCODWYvM3++qZv0HluwDSxAneJU2U0cBEhSjHLM5tqrS0ZngNh7t
YAluhYTdnHTpaih45ltUUAZPjslcZzKShOd+ByVlqZ/sggTJPyBQ3dS7kNSceHlqlHOW7FjNn8S6
aJIeEXmuvU4VQrSYn01MeFFut6ldFsiackD4+3Nbjft107AWz7Dexh1HYuFNypFWBGYyOSV6ao1M
USn0AqQ2N2d5Xi/rciMuyFkMfLN7YUtqJJzD1lfw/c5g5RfGgM4K/RqqpnrMHuVz6PPczbbAJYGu
caycIaLd/AZisHtZcSQ6d8xOpwddRKoGac6f9f58TQ77nRhlxigNa1il3XRaGjkSX0uhlcB63mya
cFqzMB15VZOeOGP19uLezot3GX26K/Ka3cdsoHooUVkP+Q+9i+xBOApDqx/blgZTeYOeWYwEASbn
OkGjvTjvvOqH5tXdO9ulqLKrSLvealwr30Xjzx22gYhpjICtPn8T/SkkS+Z0bnSI39HmxQi0zytw
WXyyNnriy5fXmhRZmYMb2RPUD6dJdLILWT8+kvj9jf+RyB+dcH2PyqBIUf+Ffybf+H+V9fM3SmSr
7cEEAAA=#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2020 v5.7.172
     Generated on:       25.04.2020 15:06
     Generated by:       philip
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2020
#>


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-search_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formMain = New-Object 'System.Windows.Forms.Form'
	$textboxSearch = New-Object 'System.Windows.Forms.TextBox'
	$buttonSearch = New-Object 'System.Windows.Forms.Button'
	$datagridviewResults = New-Object 'System.Windows.Forms.DataGridView'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$buttonQuery = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($null -eq $Item)
		{
			$DataGridView.DataSource = $null
		}
		elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($null -eq $InputObject)
		{
			$Table.Clear()
			return @( ,$Table)
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @(,$Table)
	}
	#endregion
	
	#region Search Function
	function SearchGrid()
	{
		$RowIndex = 0
		$ColumnIndex = 0
		$seachString = $textboxSearch.Text
		
		if($seachString -eq "")
		{
			return
		}
		
		if($datagridviewResults.SelectedCells.Count -ne 0)
		{
			$startCell = $datagridviewResults.SelectedCells[0];
			$RowIndex = $startCell.RowIndex
			$ColumnIndex = $startCell.ColumnIndex + 1
		}
		
		$columnCount = $datagridviewResults.ColumnCount
		$rowCount = $datagridviewResults.RowCount
		for(;$RowIndex -lt $rowCount; $RowIndex++)
		{
			$Row = $datagridviewResults.Rows[$RowIndex]
			
			for(;$ColumnIndex -lt $columnCount; $ColumnIndex++)
			{
				$cell = $Row.Cells[$ColumnIndex]
				
				if($null -ne $cell.Value -and $cell.Value.ToString().IndexOf($seachString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
				{
					$datagridviewResults.CurrentCell = $cell
					return
				}
			}
			
			$ColumnIndex = 0
		}
		
		$datagridviewResults.CurrentCell = $null
		[void][System.Windows.Forms.MessageBox]::Show("The search has reached the end of the grid.","String not Found")
		
	}
	#endregion
	
	$formMain_Load={
		$Script:settings = Get-Content -Path settings.json | ConvertFrom-Json
		if ($settings.title)
		{
			$formMain.Text = $settings.title
		}
		
	}
	
	$buttonExit_Click={
		$formMain.Close()
	}
	
	$buttonQuery_Click= {
		$computers = $settings.dc | ForEach-Object { Get-ADComputer -Filter { Enabled -eq $true } -Properties DNSHostName, IPv4Address -Server $_ }
		$computers = $computers | Select-Object -Property DNSHostName, IPv4Address
		Update-DataGridView -DataGridView $datagridviewResults -Item $computers -AutoSizeColumns DisplayedCells
	}
	
	$buttonSearch_Click={
		SearchGrid
	}
	
	$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		if($datagridviewResults.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridviewResults.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
	
			$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
		}
	}
	
	$textboxSearch_KeyDown=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		if($_.KeyCode -eq 'Enter' -and $buttonSearch.Enabled)
		{
			SearchGrid
			$_.SuppressKeyPress = $true
		}
	}
	
	$datagridviewResults_MouseDoubleClick=[System.Windows.Forms.MouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
		if ($datagridviewResults.SelectedCells.Value)
		{
			$computer = $datagridviewResults.SelectedCells.Value
			Invoke-Expression $settings.connect
		}
		#$datagridviewResults.SelectedCells
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formMain.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textboxSearch.remove_KeyDown($textboxSearch_KeyDown)
			$buttonSearch.remove_Click($buttonSearch_Click)
			$datagridviewResults.remove_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
			$datagridviewResults.remove_MouseDoubleClick($datagridviewResults_MouseDoubleClick)
			$buttonExit.remove_Click($buttonExit_Click)
			$buttonQuery.remove_Click($buttonQuery_Click)
			$formMain.remove_Load($formMain_Load)
			$formMain.remove_Load($Form_StateCorrection_Load)
			$formMain.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formMain.SuspendLayout()
	#
	# formMain
	#
	$formMain.Controls.Add($textboxSearch)
	$formMain.Controls.Add($buttonSearch)
	$formMain.Controls.Add($datagridviewResults)
	$formMain.Controls.Add($buttonExit)
	$formMain.Controls.Add($buttonQuery)
	$formMain.AutoScaleDimensions = '6, 13'
	$formMain.AutoScaleMode = 'Font'
	$formMain.ClientSize = '584, 362'
	$formMain.Name = 'formMain'
	$formMain.StartPosition = 'CenterScreen'
	$formMain.Text = 'AD PC Search and Connect'
	$formMain.add_Load($formMain_Load)
	#
	# textboxSearch
	#
	$textboxSearch.Anchor = 'Top, Left, Right'
	$textboxSearch.Location = '13, 15'
	$textboxSearch.Name = 'textboxSearch'
	$textboxSearch.Size = '477, 20'
	$textboxSearch.TabIndex = 0
	$textboxSearch.add_KeyDown($textboxSearch_KeyDown)
	#
	# buttonSearch
	#
	$buttonSearch.Anchor = 'Top, Right'
	$buttonSearch.Location = '496, 13'
	$buttonSearch.Name = 'buttonSearch'
	$buttonSearch.Size = '75, 23'
	$buttonSearch.TabIndex = 1
	$buttonSearch.Text = '&Search'
	$buttonSearch.UseCompatibleTextRendering = $True
	$buttonSearch.UseVisualStyleBackColor = $True
	$buttonSearch.add_Click($buttonSearch_Click)
	#
	# datagridviewResults
	#
	$datagridviewResults.AllowUserToAddRows = $False
	$datagridviewResults.AllowUserToDeleteRows = $False
	$datagridviewResults.AllowUserToResizeRows = $False
	$datagridviewResults.Anchor = 'Top, Bottom, Left, Right'
	$datagridviewResults.AutoSizeColumnsMode = 'AllCells'
	$datagridviewResults.Location = '12, 42'
	$datagridviewResults.MultiSelect = $False
	$datagridviewResults.Name = 'datagridviewResults'
	$datagridviewResults.ReadOnly = $True
	$datagridviewResults.SelectionMode = 'CellSelect'
	$datagridviewResults.Size = '560, 279'
	$datagridviewResults.TabIndex = 2
	$datagridviewResults.add_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
	$datagridviewResults.add_MouseDoubleClick($datagridviewResults_MouseDoubleClick)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.Location = '497, 327'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 4
	$buttonExit.Text = 'E&xit'
	$buttonExit.UseCompatibleTextRendering = $True
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	#
	# buttonQuery
	#
	$buttonQuery.Anchor = 'Bottom, Left'
	$buttonQuery.Location = '12, 327'
	$buttonQuery.Name = 'buttonQuery'
	$buttonQuery.Size = '75, 23'
	$buttonQuery.TabIndex = 3
	$buttonQuery.Text = '&Query'
	$buttonQuery.UseCompatibleTextRendering = $True
	$buttonQuery.UseVisualStyleBackColor = $True
	$buttonQuery.add_Click($buttonQuery_Click)
	$formMain.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formMain.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formMain.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formMain.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formMain.ShowDialog()

} #End Function

#Call the form
Show-search_psf | Out-Null
